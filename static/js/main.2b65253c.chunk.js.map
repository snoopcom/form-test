{"version":3,"sources":["components/FirstStep/ValidationSchema.js","components/FirstStep/FirstStep.js","components/SecondStep/ValidationSchema.js","components/SecondStep/SecondStep.js","components/Submit/Submit.js","components/SignUp/SignUp.js","components/App/App.js","index.js"],"names":["validationSchema","yup","shape","login","max","required","password","matches","phone","initialValues","FirstStep","formData","setForm","navigation","useState","isActive","setActive","onChangeHandle","a","isValid","onChange","className","htmlFor","Item","name","value","id","placeholder","size","Password","disabled","onClick","next","firstName","lastName","mail","email","SecondStep","onChangeHandleTest","previous","Submit","console","log","defaultData","steps","SignUp","useForm","useStep","initialStep","step","props","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b65253c.chunk.js","sourcesContent":["import * as yup from 'yup';\r\n\r\nconst validationSchema = yup.object().shape({\r\n  login: yup.string()\r\n    .max(50, 'Имя должно содержать не более 50 символов')\r\n    .required('Пожалуйста, введите имя'),\r\n  password: yup.string()\r\n    .matches(\r\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=(.*[a-zA-Z]){4}).{8,20}$/,\r\n      'Введите не меньше 8 символов, как минимум одна цифра и одна заглавная буква',\r\n    )\r\n    .required('Пожалуйста, введите пароль'),\r\n  phone: yup.string()\r\n    .matches(\r\n      /^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/,\r\n      'Введите пожалуйста номер телефона'\r\n    )\r\n    .required('Введите пожалуйста номер телефона'),\r\n});\r\n\r\nexport default validationSchema;\r\n","import React, { useState } from 'react';\r\nimport { Formik } from 'formik';\r\nimport { Form, Input, SubmitButton } from 'formik-antd';\r\n\r\nimport validationSchema from './ValidationSchema';\r\n\r\nconst initialValues = {\r\n  login: '',\r\n  password: '',\r\n  phone: '',\r\n};\r\n\r\nexport const FirstStep = ({ formData, setForm, navigation }) => {\r\n  const  { login, password, phone } = formData;\r\n   \r\n  const [ isActive, setActive ] = useState(true);\r\n\r\n  const onChangeHandle = async () => {\r\n    const isValid = await validationSchema.isValid(formData)\r\n    setActive(isValid)\r\n  }\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} validationSchema={validationSchema}>\r\n      <Form onChange={onChangeHandle} className=\"form\">\r\n      <h1 className=\"header\">Регистрация</h1>\r\n        <div>\r\n          <label className=\"inputName\" htmlFor=\"login\">Логин</label>\r\n          <Form.Item name=\"login\" >\r\n            <Input\r\n              className=\"input\"\r\n              value={login}\r\n              id=\"login\"\r\n              name=\"login\"\r\n              onChange={setForm}\r\n              placeholder=\"Алексей\"\r\n              size=\"large\"\r\n            />\r\n          </Form.Item>\r\n        </div>\r\n        <div>\r\n          <label className=\"inputName\" htmlFor=\"password\">Пароль</label>\r\n          <Form.Item name=\"password\" >\r\n            <Input.Password\r\n              className=\"input\"\r\n              value={password}\r\n              id=\"password\"\r\n              name=\"password\"\r\n              onChange={setForm}\r\n              placeholder=\"password\"\r\n              size=\"large\"\r\n            />\r\n          </Form.Item>\r\n        </div>\r\n        <div>\r\n          <label className=\"inputName\" htmlFor=\"phone\">Номер телефона</label>\r\n          <Form.Item name=\"phone\" >\r\n            <Input \r\n              className=\"input\"\r\n              value={phone}\r\n              id=\"phone\"\r\n              name=\"phone\"\r\n              onChange={setForm}\r\n              size=\"large\"\r\n            />\r\n            <span className=\"inputDescription\">на случай, если вы забудете свой пароль</span>\r\n          </Form.Item>\r\n        </div>\r\n        <div className=\"formButtonsContainer\">\r\n          <SubmitButton \r\n            className=\"button\"\r\n            size=\"large\" \r\n            disabled={!isActive}\r\n            onClick={() => navigation.next()}\r\n          >\r\n            Продложить\r\n          </SubmitButton>\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n ","import * as yup from 'yup';\r\n\r\nexport const validationSchema = yup.object().shape({\r\n  firstName: yup.string()\r\n    .required('Пожалуйста, введите имя'),\r\n  lastName: yup.string()\r\n    .required('Пожалуйста, введите фамилию'),\r\n  mail: yup.string().email('Неккоретный email').required('Пожалуйста, введите почту'),\r\n});","/* eslint-disable default-case */\r\nimport React, { useState } from 'react';\r\nimport { Formik } from 'formik';\r\nimport { Form, Input, SubmitButton } from 'formik-antd';\r\nimport { validationSchema } from './ValidationSchema';\r\n\r\nconst initialValues = {\r\n  firstName: '',\r\n  lastName: '',\r\n  mail: '',\r\n};\r\n\r\nexport const SecondStep = ({ formData, setForm, navigation }) => {\r\n  const { firstName, lastName, mail } = formData \r\n\r\n  const [ isActive, setActive ] = useState(true);\r\n\r\n  const onChangeHandleTest = async () => {\r\n    const isValid = await validationSchema.isValid(formData)\r\n    setActive(!isValid)\r\n  }\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} validationSchema={validationSchema}>\r\n      <Form onChange={onChangeHandleTest} className=\"form\">\r\n      <h1 className=\"header\">Регистрация</h1>\r\n        <div>\r\n          <label className=\"inputName\" htmlFor=\"firstName\">Имя</label>\r\n          <Form.Item name=\"firstName\">\r\n            <Input\r\n              value={firstName}\r\n              id=\"firstName\"\r\n              name=\"firstName\"\r\n              onChange={setForm}\r\n              size=\"large\"\r\n            />\r\n          </Form.Item>\r\n        </div>\r\n        <div>\r\n          <label className=\"inputName\" htmlFor=\"lastName\">Фамилия</label>\r\n          <Form.Item name=\"lastName\">\r\n            <Input\r\n              value={lastName}\r\n              id=\"lastName\"\r\n              name=\"lastName\"\r\n              onChange={setForm}\r\n              size=\"large\"\r\n            />\r\n          </Form.Item>\r\n        </div>\r\n        <div>\r\n          <label className=\"inputName\" htmlFor=\"mail\">E-mail</label>\r\n          <Form.Item name=\"mail\">\r\n            <Input\r\n              value={mail}\r\n              id=\"mail\"\r\n              name=\"mail\"\r\n              onChange={setForm}\r\n              size=\"large\"\r\n            />\r\n            <span className=\"inputDescription\">на случай, если вы забудете свой пароль</span>\r\n          </Form.Item>\r\n        </div>\r\n        <div >\r\n          <SubmitButton className=\"formButtonsContainer\"\r\n            className=\"button\"\r\n            size=\"large\" \r\n            disabled={isActive}\r\n            onClick={() => navigation.next()}\r\n          >\r\n            Зарегистрировать\r\n          </SubmitButton>\r\n        </div>\r\n        <button \r\n            className=\"buttonBack\"\r\n            onClick={() => navigation.previous()}\r\n        >\r\n         {'< Назад'}\r\n        </button>\r\n      </Form>\r\n    </Formik>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const Submit = ({ formData }) => {\r\n  console.log(formData);\r\n  return (\r\n    <div>\r\n      <h1 className=\"header\">Спасибо Вам за регистрацию! :)</h1>\r\n    </div>\r\n  )\r\n}","/* eslint-disable default-case */\r\nimport React from 'react';\r\nimport { useForm, useStep } from 'react-hooks-helper';\r\nimport { FirstStep }  from '../FirstStep/FirstStep';\r\nimport { SecondStep }  from '../SecondStep/SecondStep';\r\nimport { Submit }  from '../Submit/Submit';\r\n\r\nconst defaultData = {\r\n  login: \"\",\r\n  password: \"\",\r\n  phone: \"\",\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  mail: \"\",\r\n}\r\n\r\nconst steps = [\r\n  { id: 'firstStep' },\r\n  { id: 'secondStep' },\r\n  { id: 'submit' },\r\n];\r\n\r\nconst SignUp = () => {\r\n  const [formData, setForm] = useForm(defaultData);\r\n  const { step, navigation } = useStep({\r\n    steps,\r\n    initialStep: 0,\r\n  })\r\n \r\n  const props = { formData, setForm, navigation }\r\n\r\n  switch (step.id) {\r\n    case 'firstStep':\r\n      return <FirstStep {...props} />;\r\n    case 'secondStep':\r\n      return <SecondStep {...props} />;\r\n    case 'submit':\r\n      return <Submit {...props} />;\r\n  }  \r\n}\r\n\r\nexport default SignUp;","import React from 'react';\r\nimport SignUp from '../SignUp/SignUp';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <SignUp />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}